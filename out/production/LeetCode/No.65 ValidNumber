/**
Validate if a given string is numeric.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.
*/

public class Solution {
    
        public boolean isNumber(String s) {
		 s = s.trim();  
	     if (s.length() == 0) return false;    
	     if (s.charAt(0) == '+' || s.charAt(0) == '-') { 
	    	 s = s.substring(1);
	     }
	     
	     int posee = 0;
	     int pose = s.indexOf("e");
	     int posE = s.indexOf("E");
	     
	     if((pose>=0)&&(posE>=0)) 
	    	 return false;
	     else if((pose>=0)&&(posE==-1))
	    	 posee = pose;
	     else if((pose==-1)&&(posE>=0))
	    	 posee = posE;
	     
	     if (posee != 0) {  
	    	 String poste = s.substring(posee + 1);  
	         if (poste.length() == 0) 
	        	 return false;  
	         if (poste.charAt(0) == '+' || poste.charAt(0) == '-') {  
	             poste = poste.substring(1);  
	         }  
	         if (!isPureDigit(poste)) 
	        	 return false;  
	         s = s.substring(0, posee);  
	         }  
	     int posdot = s.indexOf(".");  
	     if (posdot >= 0) {  
	    	 String predot = s.substring(0, posdot);  
	         String postdot = s.substring(posdot + 1);  
	         if (predot.isEmpty()) return isPureDigit(postdot);  
	         if (postdot.isEmpty()) return isPureDigit(predot);  
	         return isPureDigit(predot) && isPureDigit(postdot);  
	        }
		 
		 return isPureDigit(s); 
		 
	    }
	 public boolean isPureDigit(String s) {  
	        if (s.isEmpty()) return false;  
	        for (int i = 0; i < s.length(); i++) {  
	            if (!Character.isDigit(s.charAt(i))) return false;  
	        }  
	        return true;  
	    }  

}
